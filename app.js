// Generated by CoffeeScript 1.6.3
(function() {
  var app, assetsHashMap, cluster, config, express, generateTemplateGlobals, gruntAssets, helpers, i, log, server, setupMiddleware, _getAsset, _i, _ref;

  helpers = require('./app/shared/helpers');

  log = helpers.log;

  cluster = require('cluster');

  config = require('config');

  express = require('express');

  if (cluster.isMaster) {
    for (i = _i = 1, _ref = config.workers; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      log("Starting worker " + i);
      cluster.fork();
    }
    cluster.on('exit', function(worker, code, signal) {
      log("Worker " + worker.process.pid + " died");
      if (!config.debug) {
        return cluster.fork();
      } else {
        return process.exit();
      }
    });
  } else {
    server = require('./app/server');
    if (!config.debug) {
      assetsHashMap = require('./public/assets/hashmap.json');
    }
    app = express();
    generateTemplateGlobals = function() {
      app.locals.pretty = config.debug;
      app.locals.helpers = helpers;
      app.locals.env = process.env.NODE_ENV;
      return app.locals.client_env = {
        hostname: config.hostname,
        base_url: config.base_url,
        debug: config.debug,
        ga_id: config.ga_id,
        rendered: (new Date()).toUTCString(),
        version: require('./package').version
      };
    };
    _getAsset = function(name) {
      var baseName, ext, hash;
      if (config.debug) {
        return "/assets/" + name;
      } else {
        ext = name.split('.').pop();
        baseName = name.replace('.' + ext, '');
        hash = assetsHashMap[name];
        return "/assets/" + baseName + ".min." + hash + "." + ext;
      }
    };
    gruntAssets = function(req, res, next) {
      req.app.locals.getAsset = _getAsset;
      return next();
    };
    setupMiddleware = function() {
      app.use(express["static"](__dirname + '/public'));
      app.use(gruntAssets);
      if (!config.debug) {
        app.use(express.compress());
        return app.use(express.logger('default'));
      } else {
        app.use(express.errorHandler({
          dumpExceptions: true,
          showStack: true
        }));
        return app.use(express.logger('dev'));
      }
    };
    app.enable('trust proxy');
    app.disable('x-powered-by');
    app.set('port', config.port);
    app.set('views', __dirname + '/views/server');
    app.set('view engine', 'jade');
    generateTemplateGlobals();
    setupMiddleware();
    app.use(app.router);
    server.use(app);
    if (config.debug) {
      app.listen(app.get('port'), function() {
        return log("Server listening on http://127.0.0.1:" + (app.get('port')) + " (unbound)");
      });
    } else {
      if (config.ip) {
        app.listen(app.get('port'), config.ip, function() {
          return log("Server listening on http://" + config.ip + ":" + (app.get('port')) + " (bound to ip)");
        });
      } else {
        app.listen(app.get('port'), function() {
          return log("Server listening on http://127.0.0.1:" + (app.get('port')) + " (unbound)");
        });
      }
    }
  }

}).call(this);
